# -*- coding: utf-8 -*-
"""Banco de dados Tech.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OMtjF4hMT6-o4Cs784D6bLqIblK_rWQM
"""

#BANCO DE DADOS TECH - BUSCA DE MEIOS DE CONTATO

import pandas as pd
from IPython.display import display
import ipywidgets as widgets
from google.colab import files

# Link da planilha
sheet_id = "1o8WxZootUshy8F7gFMEmmIxDGONtvGvxKjCvBJdgTEI"
aba = "Relat%C3%B3rio%20Contatos%20Tech"
url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={aba}"

# Lê os dados
df = pd.read_csv(url)
df.columns = df.columns.str.strip()

# Textarea para IDs
ids_widget = widgets.Textarea(
    placeholder='Cole os IDs aqui separados por espaço, vírgula ou enter',
    description='IDs:',
    layout=widgets.Layout(width='50%', height='150px')
)

# Botão de filtro
botao_filtrar = widgets.Button(description="Filtrar")

# Saídas
output_resultado = widgets.Output()
output_botao_exportar = widgets.Output()

# Armazena resultado
df_resultado = pd.DataFrame()

# Ação do botão de filtro
def filtrar_dados(b):
    global df_resultado
    with output_resultado:
        output_resultado.clear_output()
        output_botao_exportar.clear_output()

        # Processa os IDs
        texto = ids_widget.value
        ids = [i.strip() for i in texto.replace(",", " ").split()]

        # Filtra
        df_filtrado = df[df["User ID Appmax"].astype(str).isin(ids)]

        # Colunas desejadas
        colunas_desejadas = [
            "Nome",
            "E-mail",
            "Número de telefone",
            "Modelo de Negócio",
            "Modelo de negócio qualificação",
            "Status atual RFV",
            "Status Notion"
        ]

        df_resultado = df_filtrado[colunas_desejadas]
        print(f"{df_resultado.shape[0]} resultados encontrados com os IDs fornecidos.\n")
        display(df_resultado)

        # Mostra botão de exportar abaixo da lista
        with output_botao_exportar:
            botao_exportar = widgets.Button(description="Exportar Excel")
            botao_exportar.on_click(exportar_excel)
            display(botao_exportar)

# Ação do botão de exportação
def exportar_excel(b):
    df_resultado.to_excel("resultado_filtrado.xlsx", index=False)
    files.download("resultado_filtrado.xlsx")

# Evento do botão
botao_filtrar.on_click(filtrar_dados)

# Interface
display(ids_widget, botao_filtrar, output_resultado, output_botao_exportar)